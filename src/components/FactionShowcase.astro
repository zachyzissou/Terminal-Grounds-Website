---
// Interactive Faction Showcase Component
export interface Props {
    title?: string;
}

const { title = "Major Factions" } = Astro.props;

const factions = [
    {
        id: 'directorate',
        name: 'Sky Bastion Directorate',
        motto: 'Order Through Discipline',
        color: '#0077FF',
        emblem: '/assets/images/factions/directorate-emblem-ultimate.png',
        description: 'Military order through discipline, legitimacy by command continuity.',
        strength: 'Tactical Precision',
        territory: 'Sky Bastion Complex',
        relations: { iron: -2, free77: 0, corporate: 1, nomad: -1, archive: 0, civic: -1 }
    },
    {
        id: 'iron',
        name: 'Iron Scavengers',
        color: '#FF4444',
        emblem: '/assets/images/factions/iron-scavengers-emblem.png',
        description: 'Elite salvage specialists operating from Crimson Freeport.',
        strength: 'Tech Salvage',
        territory: 'Machine Grave',
        relations: { directorate: -2, free77: 1, corporate: -1, nomad: 1, archive: 0, civic: 0 }
    },
    {
        id: 'free77',
        name: 'The Seventy-Seven',
        motto: 'Competence Is Currency',
        color: '#00FF88',
        emblem: '/assets/images/factions/free77-emblem.png',
        description: 'Professional mercenaries where competence is currency.',
        strength: 'Adaptability',
        territory: 'Neutral Zones',
        relations: { directorate: 0, iron: 1, corporate: 1, nomad: 0, archive: 0, civic: 0 }
    },
    {
        id: 'corporate',
        name: 'Corporate Hegemony',
        motto: 'Progress Through Technology',
        color: '#AA55FF',
        description: 'Industrial giants controlling the Machine Grave factories.',
        strength: 'Resources',
        territory: 'Industrial Sectors',
        relations: { directorate: 1, iron: -1, free77: 1, nomad: -2, archive: 1, civic: -1 }
    },
    {
        id: 'nomad',
        name: 'Nomad Clans',
        motto: 'Freedom Through Mobility',
        color: '#FF9900',
        emblem: '/assets/images/factions/nomad-clans-emblem.png',
        description: 'Convoy-based civilization masters of the wasteland routes.',
        strength: 'Mobility',
        territory: 'Wasteland Routes',
        relations: { directorate: -1, iron: 1, free77: 0, corporate: -2, archive: 0, civic: 1 }
    },
    {
        id: 'archive',
        name: 'Archive Keepers',
        motto: 'Knowledge Preserves',
        color: '#FFDD00',
        description: 'Guardians of pre-Cascade history and alien secrets.',
        strength: 'Intelligence',
        territory: 'Deep Vault',
        relations: { directorate: 0, iron: 0, free77: 0, corporate: 1, nomad: 0, civic: 1 }
    },
    {
        id: 'civic',
        name: 'Civic Wardens',
        motto: 'Community Protects',
        color: '#00DDFF',
        description: 'Community protectors of the underground Sump Gardens.',
        strength: 'Unity',
        territory: 'Sump Gardens',
        relations: { directorate: -1, iron: 0, free77: 0, corporate: -1, nomad: 1, archive: 1 }
    }
];
---

<section class="section">
    <div class="container">
        <div class="section-header text-center">
            <h2 class="bloom-display" style="color: var(--bloom-text-primary);">
                {title}
            </h2>
            <p class="bloom-body">
                Seven primary factions vie for control of the Terminal Grounds. Navigate complex relationships through aid, arbitration, or ambush.
            </p>
        </div>
        
        <!-- Faction Grid -->
        <div class="grid grid-cols-1 grid-cols-2 grid-cols-3 grid-cols-4 gap-6 mb-12">
            {factions.map((faction) => (
                <div 
                    class="faction-card card animate-slide-up"
                    data-faction-id={faction.id}
                    style={`--faction-color: ${faction.color}; cursor: pointer;`}
                >
                    <div class="card-header text-center">
                        <div class="faction-emblem">
                            {faction.emblem ? (
                                <img 
                                    src={faction.emblem} 
                                    alt={`${faction.name} Emblem`}
                                    class="faction-emblem-img"
                                    loading="lazy"
                                />
                            ) : (
                                <div 
                                    class="faction-emblem-placeholder"
                                    style={`background: linear-gradient(135deg, ${faction.color}44, ${faction.color}88); width: 64px; height: 64px; border-radius: 50%; margin: 0 auto;`}
                                />
                            )}
                        </div>
                        <h3 class="card-title" style={`color: ${faction.color};`}>
                            {faction.name}
                        </h3>
                        {faction.motto && (
                            <p class="bloom-mono" style="color: var(--bloom-text-muted); font-size: 0.75rem; font-style: italic; margin-top: var(--space-1);">
                                "{faction.motto}"
                            </p>
                        )}
                    </div>
                    <div class="card-description">
                        <p>{faction.description}</p>
                    </div>
                    <div class="faction-stats">
                        <div class="stat">
                            <span class="stat-label">Strength</span>
                            <span class="bloom-interface" style="color: var(--bloom-accent); font-weight: 600;">{faction.strength}</span>
                        </div>
                        <div class="stat">
                            <span class="stat-label">Territory</span>
                            <span class="bloom-interface" style="color: var(--bloom-text-primary); font-weight: 600;">{faction.territory}</span>
                        </div>
                    </div>
                    <div class="faction-color-indicator" style={`position: absolute; bottom: 0; left: 0; right: 0; height: 2px; background: linear-gradient(90deg, transparent, ${faction.color}, transparent); opacity: 0; transition: opacity var(--anim-normal);`} />
                </div>
            ))}
        </div>
        
        <!-- Relationship Matrix -->
        <div class="card" style="max-width: 72rem; margin: 0 auto; margin-top: var(--space-16);">
            <div class="card-header text-center">
                <h3 class="card-title bloom-display" style="font-size: 1.5rem;">
                    Faction Relations Matrix
                </h3>
                <p class="card-description">
                    Hover over a faction to see their diplomatic relationships
                </p>
            </div>
            <div id="relationshipCanvas" class="relative" style="height: 24rem; border-radius: 8px; overflow: hidden; background: var(--bloom-shadow);">
                <!-- Canvas for relationship visualization will be inserted here -->
            </div>
            <div class="flex justify-center gap-8" style="margin-top: var(--space-6);">
                <div class="flex items-center gap-2">
                    <div style="width: 1rem; height: 1rem; background: var(--bloom-success); border-radius: 4px;"></div>
                    <span class="bloom-mono" style="color: var(--bloom-text-muted); font-size: 0.875rem;">Allied</span>
                </div>
                <div class="flex items-center gap-2">
                    <div style="width: 1rem; height: 1rem; background: var(--bloom-interface); border-radius: 4px;"></div>
                    <span class="bloom-mono" style="color: var(--bloom-text-muted); font-size: 0.875rem;">Neutral</span>
                </div>
                <div class="flex items-center gap-2">
                    <div style="width: 1rem; height: 1rem; background: var(--bloom-warning); border-radius: 4px;"></div>
                    <span class="bloom-mono" style="color: var(--bloom-text-muted); font-size: 0.875rem;">Hostile</span>
                </div>
            </div>
        </div>
        
        <!-- Faction Comparison Tool -->
        <div class="card" style="margin-top: var(--space-12);">
            <div class="card-header text-center">
                <h3 class="card-title bloom-display" style="font-size: 1.5rem;">
                    Compare Factions
                </h3>
            </div>
            <div class="flex flex-wrap justify-center gap-4 mb-8">
                <select id="faction1Select" class="bloom-interface" style="padding: var(--space-3) var(--space-4); background: var(--bloom-shadow); color: var(--bloom-text-primary); border: 1px solid var(--bloom-interface); border-radius: 4px;">
                    <option value="">Select First Faction</option>
                    {factions.map(f => (
                        <option value={f.id}>{f.name}</option>
                    ))}
                </select>
                <span class="bloom-mono" style="color: var(--bloom-text-muted); align-self: center;">VS</span>
                <select id="faction2Select" class="bloom-interface" style="padding: var(--space-3) var(--space-4); background: var(--bloom-shadow); color: var(--bloom-text-primary); border: 1px solid var(--bloom-interface); border-radius: 4px;">
                    <option value="">Select Second Faction</option>
                    {factions.map(f => (
                        <option value={f.id}>{f.name}</option>
                    ))}
                </select>
            </div>
            <div id="comparisonResult" class="hidden">
                <div class="grid grid-cols-1 grid-cols-2 gap-6" style="max-width: 64rem; margin: 0 auto;">
                    <div id="faction1Info" class="card" style="border: 2px solid transparent; transition: all var(--anim-normal);"></div>
                    <div id="faction2Info" class="card" style="border: 2px solid transparent; transition: all var(--anim-normal);"></div>
                </div>
            </div>
        </div>
    </div>
</section>

<script define:vars={{ factions }}>
    // Interactive faction showcase functionality
    document.addEventListener('DOMContentLoaded', () => {
        // Faction card hover effects
        const factionCards = document.querySelectorAll('.faction-card');
        
        factionCards.forEach(card => {
            card.addEventListener('mouseenter', function() {
                const indicator = this.querySelector('.faction-color-indicator');
                if (indicator) {
                    indicator.style.opacity = '1';
                }
                
                // Highlight relationships in matrix
                const factionId = this.dataset.factionId;
                highlightRelationships(factionId);
            });
            
            card.addEventListener('mouseleave', function() {
                const indicator = this.querySelector('.faction-color-indicator');
                if (indicator) {
                    indicator.style.opacity = '0';
                }
                clearRelationshipHighlights();
            });
        });
        
        // Faction comparison tool
        const faction1Select = document.getElementById('faction1Select');
        const faction2Select = document.getElementById('faction2Select');
        const comparisonResult = document.getElementById('comparisonResult');
        
        function updateComparison() {
            const f1Id = faction1Select.value;
            const f2Id = faction2Select.value;
            
            if (!f1Id || !f2Id) {
                comparisonResult.classList.add('hidden');
                return;
            }
            
            const f1 = factions.find(f => f.id === f1Id);
            const f2 = factions.find(f => f.id === f2Id);
            
            if (!f1 || !f2) return;
            
            comparisonResult.classList.remove('hidden');
            
            const faction1Info = document.getElementById('faction1Info');
            const faction2Info = document.getElementById('faction2Info');
            
            faction1Info.style.borderColor = f1.color + '88';
            faction2Info.style.borderColor = f2.color + '88';
            
            faction1Info.innerHTML = `
                <h4 class="card-title bloom-display" style="color: ${f1.color}; margin-bottom: var(--space-4);">${f1.name}</h4>
                <div class="flex flex-col gap-3">
                    <div class="flex justify-between">
                        <span class="bloom-mono" style="color: var(--bloom-text-muted);">Strength:</span>
                        <span class="bloom-interface" style="color: var(--bloom-text-primary); font-weight: 600;">${f1.strength}</span>
                    </div>
                    <div class="flex justify-between">
                        <span class="bloom-mono" style="color: var(--bloom-text-muted);">Territory:</span>
                        <span class="bloom-interface" style="color: var(--bloom-text-secondary);">${f1.territory}</span>
                    </div>
                    <div class="flex justify-between">
                        <span class="bloom-mono" style="color: var(--bloom-text-muted);">Relation to ${f2.name}:</span>
                        <span class="${getRelationClass(f1.relations[f2.id])}">${getRelationText(f1.relations[f2.id])}</span>
                    </div>
                </div>
            `;
            
            faction2Info.innerHTML = `
                <h4 class="card-title bloom-display" style="color: ${f2.color}; margin-bottom: var(--space-4);">${f2.name}</h4>
                <div class="flex flex-col gap-3">
                    <div class="flex justify-between">
                        <span class="bloom-mono" style="color: var(--bloom-text-muted);">Strength:</span>
                        <span class="bloom-interface" style="color: var(--bloom-text-primary); font-weight: 600;">${f2.strength}</span>
                    </div>
                    <div class="flex justify-between">
                        <span class="bloom-mono" style="color: var(--bloom-text-muted);">Territory:</span>
                        <span class="bloom-interface" style="color: var(--bloom-text-secondary);">${f2.territory}</span>
                    </div>
                    <div class="flex justify-between">
                        <span class="bloom-mono" style="color: var(--bloom-text-muted);">Relation to ${f1.name}:</span>
                        <span class="${getRelationClass(f2.relations[f1.id])}">${getRelationText(f2.relations[f1.id])}</span>
                    </div>
                </div>
            `;
        }
        
        faction1Select.addEventListener('change', updateComparison);
        faction2Select.addEventListener('change', updateComparison);
        
        function getRelationClass(value) {
            if (value > 0) return 'bloom-interface' style='color: var(--bloom-success); font-weight: 600;';
            if (value < 0) return 'bloom-interface' style='color: var(--bloom-warning); font-weight: 600;';
            return 'bloom-interface' style='color: var(--bloom-text-muted);';
        }
        
        function getRelationText(value) {
            if (value >= 2) return 'Strong Allies';
            if (value === 1) return 'Allied';
            if (value === 0) return 'Neutral';
            if (value === -1) return 'Hostile';
            if (value <= -2) return 'Enemies';
            return 'Unknown';
        }
        
        // Enhanced relationship visualization system
        let relationshipCanvas = null;
        let canvasContext = null;
        let animationFrame = null;

        function initializeRelationshipCanvas() {
            const canvas = document.getElementById('relationshipCanvas');
            if (!canvas) return;

            relationshipCanvas = canvas;
            canvasContext = canvas.getContext('2d');

            // Set canvas size
            const rect = canvas.getBoundingClientRect();
            canvas.width = rect.width * window.devicePixelRatio;
            canvas.height = rect.height * window.devicePixelRatio;
            canvasContext.scale(window.devicePixelRatio, window.devicePixelRatio);

            // Initial render
            renderRelationshipMatrix();
        }

        function renderRelationshipMatrix(highlightedFaction = null) {
            if (!canvasContext || !relationshipCanvas) return;

            const canvas = relationshipCanvas;
            const ctx = canvasContext;
            const width = canvas.width / window.devicePixelRatio;
            const height = canvas.height / window.devicePixelRatio;

            // Clear canvas
            ctx.clearRect(0, 0, width, height);

            // Draw background grid
            ctx.strokeStyle = 'rgba(0, 255, 136, 0.1)';
            ctx.lineWidth = 1;

            const gridSize = 40;
            for (let x = 0; x < width; x += gridSize) {
                ctx.beginPath();
                ctx.moveTo(x, 0);
                ctx.lineTo(x, height);
                ctx.stroke();
            }
            for (let y = 0; y < height; y += gridSize) {
                ctx.beginPath();
                ctx.moveTo(0, y);
                ctx.lineTo(width, y);
                ctx.stroke();
            }

            // Calculate faction positions (circular layout)
            const centerX = width / 2;
            const centerY = height / 2;
            const radius = Math.min(width, height) * 0.35;
            const factionPositions = {};

            factions.forEach((faction, index) => {
                const angle = (index / factions.length) * 2 * Math.PI - Math.PI / 2;
                factionPositions[faction.id] = {
                    x: centerX + Math.cos(angle) * radius,
                    y: centerY + Math.sin(angle) * radius,
                    faction: faction
                };
            });

            // Draw relationship lines
            factions.forEach(faction => {
                const fromPos = factionPositions[faction.id];

                Object.entries(faction.relations).forEach(([targetId, relationValue]) => {
                    const toPos = factionPositions[targetId];
                    if (!toPos || targetId === faction.id) return;

                    // Only draw each relationship once (avoid duplicates)
                    if (faction.id < targetId) {
                        const isHighlighted = highlightedFaction &&
                            (faction.id === highlightedFaction || targetId === highlightedFaction);

                        drawRelationshipLine(ctx, fromPos, toPos, relationValue, isHighlighted);
                    }
                });
            });

            // Draw faction nodes
            Object.values(factionPositions).forEach(pos => {
                const isHighlighted = highlightedFaction === pos.faction.id;
                drawFactionNode(ctx, pos, isHighlighted);
            });
        }

        function drawRelationshipLine(ctx, fromPos, toPos, relationValue, isHighlighted) {
            const dx = toPos.x - fromPos.x;
            const dy = toPos.y - fromPos.y;
            const distance = Math.sqrt(dx * dx + dy * dy);

            // Calculate line properties based on relationship
            let lineColor, lineWidth, lineOpacity;

            if (relationValue > 0) {
                lineColor = '#00ff88'; // Green for allies
                lineWidth = isHighlighted ? 4 : 2;
                lineOpacity = isHighlighted ? 0.9 : 0.6;
            } else if (relationValue < 0) {
                lineColor = '#ff4444'; // Red for enemies
                lineWidth = isHighlighted ? 4 : 2;
                lineOpacity = isHighlighted ? 0.9 : 0.6;
            } else {
                lineColor = '#888888'; // Gray for neutral
                lineWidth = isHighlighted ? 2 : 1;
                lineOpacity = isHighlighted ? 0.5 : 0.3;
            }

            // Draw curved line
            ctx.strokeStyle = lineColor;
            ctx.lineWidth = lineWidth;
            ctx.globalAlpha = lineOpacity;

            ctx.beginPath();
            ctx.moveTo(fromPos.x, fromPos.y);

            // Create curved connection
            const midX = (fromPos.x + toPos.x) / 2;
            const midY = (fromPos.y + toPos.y) / 2;
            const curveOffset = distance * 0.2;

            // Calculate perpendicular offset for curve
            const perpX = -dy / distance * curveOffset;
            const perpY = dx / distance * curveOffset;

            ctx.quadraticCurveTo(
                midX + perpX,
                midY + perpY,
                toPos.x,
                toPos.y
            );

            ctx.stroke();

            // Draw relationship strength indicator
            if (Math.abs(relationValue) >= 2) {
                const strengthPos = {
                    x: (fromPos.x + toPos.x) / 2,
                    y: (fromPos.y + toPos.y) / 2
                };

                ctx.fillStyle = lineColor;
                ctx.globalAlpha = isHighlighted ? 0.8 : 0.5;
                ctx.beginPath();
                ctx.arc(strengthPos.x, strengthPos.y, 3, 0, 2 * Math.PI);
                ctx.fill();
            }

            ctx.globalAlpha = 1;
        }

        function drawFactionNode(ctx, pos, isHighlighted) {
            const { x, y, faction } = pos;
            const size = isHighlighted ? 16 : 12;

            // Draw faction emblem background
            ctx.fillStyle = faction.color + (isHighlighted ? 'CC' : '88');
            ctx.beginPath();
            ctx.arc(x, y, size, 0, 2 * Math.PI);
            ctx.fill();

            // Draw border
            ctx.strokeStyle = faction.color;
            ctx.lineWidth = isHighlighted ? 3 : 2;
            ctx.stroke();

            // Draw faction initial
            ctx.fillStyle = '#ffffff';
            ctx.font = `bold ${isHighlighted ? 10 : 8}px Arial`;
            ctx.textAlign = 'center';
            ctx.textBaseline = 'middle';
            ctx.fillText(faction.name.charAt(0), x, y);
        }

        function highlightRelationships(factionId) {
            if (animationFrame) {
                cancelAnimationFrame(animationFrame);
            }

            function animate() {
                renderRelationshipMatrix(factionId);
                animationFrame = requestAnimationFrame(animate);
            }

            animate();
        }

        function clearRelationshipHighlights() {
            if (animationFrame) {
                cancelAnimationFrame(animationFrame);
                animationFrame = null;
            }
            renderRelationshipMatrix();
        }

        // Initialize canvas when DOM is ready
        if (document.readyState === 'loading') {
            document.addEventListener('DOMContentLoaded', initializeRelationshipCanvas);
        } else {
            initializeRelationshipCanvas();
        }

        // Handle window resize
        window.addEventListener('resize', () => {
            if (relationshipCanvas && canvasContext) {
                const rect = relationshipCanvas.getBoundingClientRect();
                relationshipCanvas.width = rect.width * window.devicePixelRatio;
                relationshipCanvas.height = rect.height * window.devicePixelRatio;
                canvasContext.scale(window.devicePixelRatio, window.devicePixelRatio);
                renderRelationshipMatrix();
            }
        });
    });
</script>

<style>
    .faction-card:hover {
        transform: translateY(-6px);
        box-shadow: 
            0 12px 40px rgba(0, 0, 0, 0.4),
            0 0 0 1px rgba(0, 217, 255, 0.2);
    }
    
    .faction-card:hover .faction-color-indicator {
        opacity: 1 !important;
        animation: faction-pulse 2s infinite;
    }
    
    .faction-card .faction-emblem:hover img,
    .faction-card .faction-emblem:hover .faction-emblem-img {
        transform: scale(1.1) rotate(5deg);
    }
    
    @keyframes faction-pulse {
        0%, 100% { opacity: 0.6; }
        50% { opacity: 1; }
    }
    
    /* Canvas styling */
    #relationshipCanvas {
        border: 1px solid var(--bloom-interface);
        background: radial-gradient(circle at center, var(--bloom-shadow), var(--bloom-void));
    }
    
    /* Select styling */
    select option {
        background: var(--bloom-shadow);
        color: var(--bloom-text-primary);
    }
    
    /* Responsive adjustments */
    @media (max-width: 767px) {
        .faction-card {
            margin-bottom: var(--space-4);
        }
        
        #relationshipCanvas {
            height: 16rem;
        }
        
        .grid-cols-2,
        .grid-cols-3,
        .grid-cols-4 {
            grid-template-columns: 1fr;
        }
    }
    
    @media (min-width: 768px) and (max-width: 1023px) {
        .grid-cols-3,
        .grid-cols-4 {
            grid-template-columns: repeat(2, 1fr);
        }
    }
    
    @media (min-width: 1024px) {
        .grid-cols-4 {
            grid-template-columns: repeat(3, 1fr);
        }
    }
    
    @media (min-width: 1280px) {
        .grid-cols-4 {
            grid-template-columns: repeat(4, 1fr);
        }
    }
</style>